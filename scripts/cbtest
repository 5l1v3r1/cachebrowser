#!python
import json
import sys
import time
import argparse
import errno
import os
import signal
import socket
from functools import wraps
import StringIO

hostnames = [
    'www.istockphoto.com',
    'www.nbc.com',
    'www.airbnb.com',
    'www.goldbet.com',
    'www.wsj.com'
]

servers = [
    '23.208.91.198',
    '23.218.210.7',
    '23.206.130.146',
    '69.31.76.91',
    '63.238.84.218',
    '96.6.178.100',
    '192.189.138.182'
]

class TimeoutError(Exception):
    pass

def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):
    def decorator(func):
        def _handle_timeout(signum, frame):
            raise TimeoutError(error_message)

        def wrapper(*args, **kwargs):
            signal.signal(signal.SIGALRM, _handle_timeout)
            signal.alarm(seconds)
            try:
                result = func(*args, **kwargs)
            finally:
                signal.alarm(0)
            return result

        return wraps(func)(wrapper)

    return decorator


def echo(text, newline=True):
    sys.stdout.write(text)
    if newline:
        sys.stdout.write('\n')

@timeout(seconds=10)
def run_get(url, target):
    buff = StringIO.StringIO()
    message = {
        'action': 'get',
        'url': url,
        'body': False,
        'json': True
    }
    if target:
        message['target'] = target

    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(('127.0.0.1', 4242))

        sock.send('%s\r\n' % json.dumps(message))

        while True:
            resp = sock.recv(1024)
            if not len(resp):
                break
            buff.write(resp)
        sock.close()
    except socket.error as e:
        sys.stderr.write("\nCouldn't connect to CacheBrowser, is CacheBrowser running?\n")
        sys.exit(1)

    response = json.loads(buff.getvalue())
    return response


def request(url, server):
    echo("\t%-*s" % (15, server), newline=False)
    try:
        status = run_get(url, server)['status']
    except TimeoutError:
        echo("  (---) [TIMEOUT]")
        return
    except socket.error as e:
        echo("  (ERR) [%s]" % e.message)
        return
    except ValueError as e:
        echo("  (ERR) [%s]" % e.message)
        return

    status = int(status)
    if 200 <= status < 400:
        echo("  (%d) [OK]" % status)
    else:
        echo("  (%d) [FAIL]" % status)


def run_tests(scheme, hosts, servers):
    for hostname in hosts:
        url = '%s://%s/' % (scheme, hostname)
        echo("\nGetting '%s' from:" % url)
        for server in servers:
            request(url, server)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="CacheBrowser Tester")
    parser.add_argument('protocol', choices=['http', 'https'], help="The procotol to request with")
    args = parser.parse_args()

    run_tests(args.protocol, hostnames, servers)
